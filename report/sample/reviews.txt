I really like this work. It makes very clever use of very public channel. The the algorithm to assign values to the length of messages instead of relying on metadata or content increases the size of the dictionary shared by master and bots.

But, I think there is much more to the threat model than tested here. Certainly if TLS is used, a passive observer on the network would have difficulty detecting the tweets from master to bot, but i conjecture an equally likely adversary is one who recognizes a bot on their system(s) and is trying to find the c&c - any observation of the infected machines rather than simply the network traffic, would show the bot checking (following?) particular twitter accounts regularly.

Additionally, I'm not sure that twitter encrypts the metadata - and I do know that they added several new metadata fields to their API, so they could have more data to sell. Then privacy/non-linkability would depend on the app feature set, and I expect a Passive Warden could conceivably sift through a large collection of data to link bots with twitter accounts.

***************************************************************

Summary:

The authors demonstrate how public social networking messages can be
used by botnets as a stealthy command and control channel. The authors
demonstrate this by showing how C&C commanda can be encoded into the
lengths of twitter messages. Through a simulation environment, the
authors evaluate such a covert C&C channel, arguing that it had enough
capacity for normal botnet communications. The authors also evaluate the
undetectability of their conceptual covert botnet.



Pros:

- This is a very well-written and well-motivated paper. The technical
details are stated clearly and supported with examples and proper
citations.

- The paper proposes an interesting approach to build covert channels.
Though other studies have designed similar covert channels for various
applications, the proposed covert communication plateform has still some
novelty. The botnet can also have some real-world instances in the
future, and it's good to evaluate this conceptual botnet. This is why,
despite the weaknesses discussed below, I recommend the paper to be
accepted.



Cons:


- As the authors acknowledge, twitter generation (section 3.1.2) is
perhaps the most challenging part of the proposed concept botnet,
however, the authors leave it to the future work. I do agree that this
part can be considered as a parallel, separate problem, but there needs
to be some discussion on whether and how an undetectable twitter
generator can be designed by someone, otherwise, the whole system
proposed in this work will fail. In particular, having consecutive
tweets to be semantically related seems to be a very challenging task.

- The paper's undetectability analysis is nothing near complete. In
addition to NLP and statistical based approaches for detecting such a
botnet, other approaches should be studies by the authors. For example,
a social graph analysis is likely able to easily detect this kind of
botnet, e.g., the CC account and bot accounts form disjoint cliques on
the network. (this may be hardened by having bots and botmaster randomly
follow other accounts, but it is really hard to expect other normal
accounts start following the bot accounts). What makes this attack worse
is that once a bot detector discovers  *a single* one of these bot
accounts, it will not only be able to discover the corresponding
botmaster account, but also *ALL* the other infected bots (e.g., by
finding the accounts following the botmaster).


- Another venue for detecting such a botnet is through simple active
interactions. e.g. by posting a reply to one of the tweets and see if
they reply. In general, all the methods available for detecting chat
bots (reference 3) can detect the tweeter C&C's in this case. The
authors do not discuss this thoroughly.

- The authors have implemented some parts of the proposed system, but
the entire working systems is not built.

- Unfortunately, the paper does not discuss any countermeasures for such
a botnet.

Other comments:

- "100% of input symbols were correctly de- coded by the bots except for
a small set that were off by one." What is the source of corruption
here? The channel seems to be noiseless here.

-The average of 5 seconds for "read time" is actually not too small for
a typical covert channel, but perhaps fine for the botnet application of
this paper.


- I don't understand why each symbol is mapped to multiple length values
(examples 3.1 and 3.2). This only wastes the available capacity of the
covert channel. If the objective is to normalize the distribution of
encoded tweet lengths, there are better ways for doing so without
wasting the capacity.

- What is the purpose of 4.2.4 analysis? Is it because the paper uses
the twitter API rather than the webpage?

***************************************************************

The authors discuss a steganographic approach for creating a command and control technique for botnets. They go into extensive detail on how such an information embedding would take place in a microblogging setting such as Twitter.

The references to earlier work are appropriate, with the focus mostly on Stegobot. The idea is to provide a resilient recovery method, one already seen by earlier malware such as Conficker (which the authors may want to mention, even if it's domain name generation).

What the authors fail to discuss here is the possible countermeasures for such technique, which is a major flaw in the viewpoint of this reviewer. Simply publishing an offensive technique without even an adequate beginning of a detection technique should be avoided.
